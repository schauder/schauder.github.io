= The answer to the question about JDBC, DDD, CQRS, JPA and all the rest.

Lately I'm thinking a lot about the topics in the subject.
Let me present some of the thoughts.

== Aggregates

Many people don't realize that a core idea behind Spring Data is Domain Driven Design (DDD).
About half of the readers probably nod right now.
For the other half:

Spring Data makes it easy to create repository abstractions for your choice of persistence store.
And on might get the idea that there should be a repository per entity type.
That it is not how it is supposed to work.
You should have one repository per Aggregate Root.
An Aggregate Root is an object maintaining the consistent state of itself and all the entities that are part of the same aggregate.
The canonical example is an `Order` which has `Item`s.
It is a good idea to only change `Item`s through methods on the `Order` object.
Otherwise it gets really tricky (or impossible) to keep the `Order` consistent.
If you add or remove an `Item` the total price has to change.
If you want to apply a `Rebate` on the `Item`s that often will involve the complete `Order` for example in order to check if the minimum purchase for the `Rebate` is reached.

This works great with document stores.
A document maps nicely to an aggregate.
So user of those often intuitively the right thing.

The situation is different with JPA.
JPA makes it really easy to create an object model where everything is connected to everything.
And if you don't watch what you are doing you load a single instance from the database and end up with your database loaded into memory.

Obviously you can avoid that:
Don't use eager loading across aggregates.
Maybe even consider just referencing by id to make the bounds really obvious.
If you identified your aggregates and your aggregate roots, you can also get rid of you bidirectional relationships.
After all, you always start with an aggregate root and only navigate inside the aggregate.
Why would you need a bidirectional relationship.

== Dirty checking and the repository abstraction

A repository in the context of DDD is conceptional a collection of Aggregate Roots.
You store an Aggregate by putting it in a repository.
It is almost impossible to adhere to this with JPA.
The reason is dirty checking and the session in JPA.
If your entity is attached to a session, the session tracks if it gets changed.
And if does got changed it will be flushed and stored in the database.
No direct interaction with the `EntityManager` needed.
This is really nice and useful.
Just load the entities, manipulate them, commit.
Until you want to do something every time an entity get's saved.
You can't just use a wrapped `EntityManager` because save might never get called on it.
There are events you can register to but those have http://www.objectdb.com/java/jpa/persistence/event[serious limitations]:

> To avoid conflicts with the original database operation that fires the entity lifecycle event (which is still in progress) callback methods should not call EntityManÂ­ager or Query methods and should not access any other entity objects.

This makes many use cases that should really be straight forward hard to implement.

== The power of SQL

== Let's do something different

So JPA is bad.
Let's create something better.
*For the record: JPA isn't bad.
JPA is pretty awesome.
But the creators of JPA had to make design decisions and sometimes the decisions that were made aren't the ones we like or need.*
Do something based directly on SQL and JDBC.
And no dirty checking.

*Let's build our own ORM!*

Well.
...
Don't.





Pretty much everybody in the Java universe knows and uses JPA.
And as which most technologies used by many people many people complain about things not working as they expect th




I remember, back in the days when dinosaurs walked the earth and color wasn't invented yet, and I used Hibernate for the first time.
I was amazed. Just create an object tree call persist and BAM it ended up in the database.

It was straight https://en.wikipedia.org/wiki/Clarke%27s_three_laws[Clark's third law for me]

> Any sufficiently advanced technology is indistinguishable from magic.

But then we got problems in the project.
I ended up fixing `LazyLoadingExceptions`, `NonUniqueObjectException` and similar stuff for the rest of the project.
Of course it was all our fault.
We (and especially I) did not understand how Hibernate actually worked.
But we learned.
And we fixed the problems.

Then came the day when someone said: "Lets do some performance tests"
